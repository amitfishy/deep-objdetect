[system_stuff]
gpu_id: 0

[data_dirs]
# 'train' here refers to train+val (annotated) and 'test' (not annotated) refers to any application scenario or for leaderboard submission
# This directory contains images in a readable format (contains both train and test images)
image_data_dir: $DATA_DOWNLOAD_DIR/VOCdevkit/VOC2012/JPEGImages

# This directory contains annotations in xml format of PASCAL VOC (one xml per train image)
annotation_dir: $DATA_DOWNLOAD_DIR/VOCdevkit/VOC2012/Annotations

# This directory should contain a 'train.txt' (annotated) and 'test.txt' (not annotated)
image_id_dir: $DATA_DOWNLOAD_DIR/VOCdevkit/VOC2012/ImageSets/Main

# Project Root Directory
proj_root_dir: $PROJECT_ROOT


[faster_rcnn]

use_faster_rcnn: True
# Experiment name is given to organize the results
experiment_name = experimentxy
# All outputs are stored here
output_directory: $YOUR_OUTPUT_DIR/pyfrcnn

# if dataset_type used is 'kitti', then only train_mode and test_mode have significance (in filtering the data based on annotations)
# They follow the easy, moderate and hard definitions in the kitti dataset
# Additional annotations as well as data filtering based on annotations can be added in:
# algorithms/py_faster_rcnn/lib/datasets/general_dataset_eval.py - determine_sample_mode
# algorithms/py_faster_rcnn/lib/datasets/general_dataset_eval.py - parse_rec
# algorithms/py_faster_rcnn/lib/datasets/general_dataset.py - load_general_dataset_annotation
# algorithms/py_faster_rcnn/lib/datasets/general_dataset_eval.py - general_dataset_eval
# otherwise every other dataset_type is generic and includes all the annotated data
dataset_type = pascalvoc2012

# For dataset_type = 'kitti' 1-easy,2-moderate,3-hard,4-None
# For other dataset, to include all data use 1-all data
# For setting Train restrictions on the train data
train_mode: 1
# For setting Test restriction on the test data
# Only if test_split is 'val'
test_mode: 1

# if use_validation_experiments is True then train_data_fraction < 1.0
# if use_validation_experiments is True then test_split should be 'val'
# if use_validation_experiments is True then train and test should be True
# if use_validation_experiments is True then evaluate should be True
# if use_validation_experiments is False then num_repetitions is irrelevant
# if use_validation_experiments is False then train_data_fraction indicates a fixed train-val split
use_validation_experiments: False
train: True
train_split: train
test: True
test_split: val
# set evaluate 'True' only if the annotations for that set are present (e.g. for val OR train OR if test annotations are known)
# False means it will only give the detection output file
# True means it will find the mAP as well (needs annotated data for test_split, otherwise missing file error)
# Should be False if test_split is 'test' (unless that data is annotated and you want to evaluate it)
evaluate: True

train_data_fraction: 0.8
num_repetitions: 10

# Use 11 point AP metric (2007 VOC metric) or area under prec-recall curve
use07metric: False

num_iterations: 100000
network_name: ZF

# trained model is outputted as output_model_prefix + number of iterations
# if using pretrained_weights_file, then this prefix should match the one used there
output_model_prefix = faster_rcnn_voc2012

# training using pretrained weights given by pretrained_weights_file
use_pretrained_weights: False
# if use_pretrained_weights is True pretrained_weights_file should have the number of iterations appended with an underscore at the end before file
# extension - eg: train_model_0.caffemodel
pretrained_weights_file: IDONTHAVETHISFILE

# testing using the weights just trained (use_trained_weights_test = True) or using weights from weights_file_test (use_trained_weights_test = False)
# if use_validation_experiments is True, then use_trained_weights_test should be True
use_trained_weights_test: True
# weights_file is used only when use_trained_weights is False
weights_file_test: IDONTHAVETHISFILE

# ----------------------------------------------------------

# Getting Online Results Parameters
weights_file_online: $PATH_TO_WEIGHTS_FILE/ZF_faster_rcnn_final.caffemodel
detection_thresh_online: 0.35
nms_thresh_online: 0.3

# ----------------------------------------------------------

# General Configs for Faster RCNN
# Prototext files used for caffe libraries
# If you're using pre-trained models for training and testing, make sure the corresponding prototxt is the same
# Solver and train proto files are required for training alone. Not used for testing or online detection.
solver_proto_file: $PROJECT_ROOT/config_data/train_test_exp/py_faster_rcnn_configs/solver.prototxt
train_proto_file: $PROJECT_ROOT/config_data/train_test_exp/py_faster_rcnn_configs/train.prototxt
# test proto file is required for testing and online detection. Not used for training.
test_proto_file: $PROJECT_ROOT/config_data/train_test_exp/py_faster_rcnn_configs/test.prototxt

# This file should remain same for the same network
# class names file is required for training, testing and online detection.
class_names_file: $PROJECT_ROOT/config_data/train_test_exp/py_faster_rcnn_configs/voc.names

# config for Faster RCNN
# cfg file is required for training, testing and online detection.
cfg_file: $PROJECT_ROOT/config_data/train_test_exp/py_faster_rcnn_configs/config.yml

#---------------------------------------------------------------------------------------------------------------------------------



[yolo]

use_yolo: True
# Experiment name is given to organize the results
experiment_name: experimentxy
# All outputs are stored here
output_directory: $YOUR_OUTPUT_DIR/darknet
dataset_type: pascalvoc2012

# For KITTI 1-easy,2-moderate,3-hard,4-None
# For other dataset, to include all data use 1-all data
# For setting Train restrictions on the train data
train_mode: 1
# For setting Test restriction on the test data
# Only if test_split is 'val'
test_mode: 1

# if use_validation_experiments is True then train_data_fraction < 1.0
# if use_validation_experiments is True then test_split should be 'val'
# if use_validation_experiments is True then train and test should be True
# if use_validation_experiments is False then num_repetitions is irrelevant
# if use_validation_experiments is False then train_data_fraction indicates a fixed train-val split
use_validation_experiments: False
train: True
train_split: train
test: True
test_split: val
# set evaluate 'True' only if the annotations for that set are present (e.g. for val OR train OR if test annotations are known)
# False means it will only give the detection output file
# True means it will find the mAP as well (needs annotated data for test_split, otherwise missing file error)
# Should be False if test_split is 'test' (unless that data is annotated and you want to evaluate it)
evaluate: True

train_data_fraction: 0.8
num_repetitions: 10

# Use 11 point AP metric (2007 VOC metric) or area under prec-recall curve
use07metric: False

# This is used over max_batches in the cfg file. num_iterations is equivalent to max_batches
num_iterations: 150000
network_name: darknet24

# trained model is outputted as output_model_prefix + number of iterations
# if using pretrained_weights_file, then this prefix should match the one used there
output_model_prefix = yolov1_voc2012

# training using pretrained weights given by pretrained_weights_file
use_pretrained_weights: False
# if use_pretrained_weights is True pretrained_weights_file should have the number of iterations appended with an underscore at the end before file
# extension - eg: train_model_0.weights
pretrained_weights_file: IDONTHAVETHISFILE

# testing using the weights just trained (use_trained_weights_test = True) or using weights from weights_file_test (use_trained_weights_test = False)
# if use_validation_experiments is True, then use_trained_weights_test should be True
use_trained_weights_test: True
# weights_file is used only when use_trained_weights_test is False
weights_file_test: IDONTHAVETHISFILE

# ----------------------------------------------------------

# Getting Online Results Parameters
weights_file_online: $PATH_TO_WEIGHTS_FILE/yolo.weights
detection_thresh_online: 0.35
nms_thresh_online: 0.3

# ----------------------------------------------------------

# General Config for darknet (yolo)
# describe network here along with other network config parameters for darknet
# network cfg file is required for training, testing and online detection
network_cfg_file: $PROJECT_ROOT/config_data/train_test_exp/yolo_configs/yolo-voc.cfg

# This file should remain same for the same network
# network cfg file is required for training, testing and online detection
class_names_file: $PROJECT_ROOT/config_data/train_test_exp/yolo_configs/voc.names

# ---------------------------------------------------------------------------------------------------------------------------------